
# タイトル
# ==========================================================================================================================

# 選択ソートは、各計算ステップで１つの最小値を「選択」していく、直観的なアルゴリズムです。

# 数列Aを読み込み、選択ソートのアルゴリズムで昇順に並び替え出力するプログラムを作成してください。上の疑似コードに従いアルゴリズムを実装してください。

# 疑似コード 7 行目で、i と minj が異なり実際に交換が行われた回数も出力してください。


# 参照
# ==========================================================================================================================
# https://medium-company.com/%E9%81%B8%E6%8A%9E%E3%82%BD%E3%83%BC%E3%83%88/

# 入力
# ==========================================================================================================================
# 入力の最初の行に、数列の長さを表す整数 N が与えられます。２行目に、N 個の整数が空白区切りで与えられます。

# 出力
# ==========================================================================================================================
# 出力は 2 行からなります。
# １行目に整列された数列を 1 行に出力してください。数列の連続する要素は１つの空白で区切って出力してください。
# 2 行目に交換回数を出力してください。



# 制約
# ==========================================================================================================================
# 1 ≤ N ≤ 100
# 0 ≤ A の要素 ≤ 100




# 入出例
# ==========================================================================================================================
# <in>
# 6
# 5 6 4 2 1 3
# <out>
# 1 2 3 4 5 6
# 4


# <in>
# 6
# 5 2 4 6 1 3
# <out>
# 1 2 3 4 5 6
# 3


# 値の取得
# ==========================================================================================================================
# 形式 => N が A の要素数
# N
# A1 A2 … AN

# <サンプル>
# 6
# 5 2 4 6 1 3

# <コード>
N,*A=map(int,open(0).read().split())





# 基本形 ※実際に動きます。※実際に動きます。
# ==========================================================================================================================
            
# 解説
# ==========================================================================================================================


# 計算速度 ; コードサイズ 優先 ※実際に動きます。
# ==========================================================================================================================
N=int(input())
A=list(map(int,input().split()))
c=0
for i in range(N-1):
    m=A.index(min(A[i:]),i)
    A[i],A[m]=A[m],A[i];c+=i!=m
print(*A)
print(c)


# メモリ ※実際に動きます。
# ==========================================================================================================================

# コードサイズ ※実際に動きます。
# ==========================================================================================================================


# 分かりやすさ 速度 優先 ※実際に動きます。
# ==========================================================================================================================
N = int(input())
A = list(map(int, input().split()))
cnt = 0
for i in range(N - 1):
    min_i = i
    for j in range(i + 1, N):
        if A[min_i] > A[j]:
            min_i = j
    if min_i != i:
        A[min_i], A[i] = A[i], A[min_i]
        cnt += 1
print(' '.join(map(str, A)))
print(cnt)





# 汎用モデル : コードサイズ 優先
# ==========================================================================================================================
def main(n,l):
    cnt=0
    for i in range(n-1):
        m=l.index(min(l[i:]),i)
        l[i],l[m]=l[m],l[i];cnt+=i!=m
    return l, cnt

test_id = 6
test_data = [5,2,4,6,1,3]
ancer_data, ancer_cnt = main(
    n = test_id,
    l = test_data
)

print(*ancer_data)
print(ancer_cnt)


# 汎用モデル : 速度優先
# ==========================================================================================================================



def main(n,l):
    cnt = 0
    for i in range(n - 1):
        min_i = i
        for j in range(i + 1, n):
            if l[min_i] > l[j]:
                min_i = j
        if min_i != i:
            l[min_i], l[i] = l[i], l[min_i]
            cnt += 1
    return l, cnt

test_id = 6
test_data = [5,2,4,6,1,3]
ancer_data, ancer_cnt = main(
    n = test_id,
    l = test_data
)

print(*ancer_data)
print(ancer_cnt)





