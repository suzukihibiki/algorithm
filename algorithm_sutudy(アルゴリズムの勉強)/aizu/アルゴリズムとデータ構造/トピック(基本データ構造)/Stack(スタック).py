

# スタック
# ==========================================================================================================================

# 逆ポーランド記法は、
# 演算子をオペランドの後に記述する数式やプログラムを記述する記法です。
# 例えば、一般的な中間記法で記述された数式 (1+2)*(5+4) は、逆ポーランド記法では 1 2 + 5 4 + * と記述されます。
# 逆ポーランド記法では、中間記法で必要とした括弧が不要である、というメリットがあります。

# 逆ポーランド記法で与えられた数式の計算結果を出力してください。


# 入力
# ==========================================================================================================================
# １つの数式が１行に与えられます。連続するシンボル（オペランドあるいは演算子）は１つの空白で区切られて与えられます。

# 出力
# ==========================================================================================================================
# 計算結果を１行に出力してください。


# 制約
# ==========================================================================================================================
# 2 <= 式に含まれるオペランドの数 <= 100
# 1 <= 式に含まれる演算子の数 <= 99
# 演算子は +、-、* のみを含み、１つのオペランドは106 以下の正の整数
# -1 * 109 <= 計算途中の値 <= 109



# 入出力例
# ==========================================================================================================================
# <in>
# 1 2 +
# <out>
# 3

# <in>
# 1 2 + 3 4 - *
# <out>
# -3


# 取得
# ==========================================================================================================================
# 形式: 空白区切りで３つの文字列の場合
# xxxxxxx yyy zzzzz

L = input().split() # type(S) => <class 'list'>


# 基本形 ※実際に動きます。
# ==========================================================================================================================


# 解説
# ==========================================================================================================================

# 計算速度 ※実際に動きます。
# ==========================================================================================================================
A = input().split()
W = []
for item in A:
    if(item=="+"):
        W[-2] = W[-2] + W[-1]
        del W[-1]
    elif(item=="-"):
        W[-2] = W[-2] - W[-1]
        del W[-1]
    elif(item=="*"):
        W[-2] = W[-2] * W[-1]
        del W[-1]
    else:
        W.append(int(item))

print(W[0])






# メモリ
# ==========================================================================================================================

# コードサイズ ※実際に動きます。
# ==========================================================================================================================






# 汎用モデル : 速度優先
# ==========================================================================================================================


# 汎用モデル : ライブラリ無しver
# ==========================================================================================================================

